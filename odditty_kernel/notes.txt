 - Tab is weird:
   * If we send `echo "\t"\n` in one go, then \a shows up on the line and in
     the output.
   * If we send `echo "\t` and `"\n` separately, then \a shows up on the line
     but not in the output.
   * On the line editor, a \t is turned into spaces and the number of spaces
     changes if you insert characters in front. However, if you, e.g. echo the
     \t, a \t is emitted.
   * Todo: check how this corresponds to pasting these sequences "atomically"
     into a terminal
   * Todo: the above behavior is about sending chars into bash. Is bash doing
     this transformation or is the kernel doing this somewhere? Pumping the
     same chars into `cat` may help answer this.

 - Emulator references:
   * Spec of xterm control sequences:
       http://invisible-island.net/xterm/ctlseqs/ctlseqs.html (latest)
       http://www.xfree86.org/4.5.0/ctlseqs.html
   * http://bjh21.me.uk/all-escapes/all-escapes.txt
   * http://vt100.net/docs/vt100-ug/chapter3.html
   * Relevant standards: ANSI X3.64, ECMA-48
   * `man terminfo` and `infocmp`

 - An interesting example command to run:
   $ (exe=bash; term=xterm; ./main.native tty -html /tmp/x.html -dim 50x30 -cwd "/tm -env TERM=$term -env HOME=/Users/datkin -exe $(which $exe) -- $exe) 2>&1

 - To investigate issues on OS X, I've been tracing via `dtruss`. Let's say we
   want to start by trace on a "normal" nano process. First, weirdly, dtruss
   doesn't work on certain executable locations? So first:

   $ cat $(which nano) > /tmp

   Note, `cp` seems to copy some attributes that prevent dtruss from tracing,
   so you really do need to cat (or do some non-vanilla invocation of `cp`).
   Then, we can't just run:

   $ sudo dtruss /tmp/nano 2>/tmp/x

   Because even redirecting stderr is enough to interfere with the execution.

   So we need to attach from a separate shell. But we also need to capture all
   the output. Sigh.

   So this hack seems to work: in one shell run:

   $ bash -c 'sleep 10; exec /tmp/nano'

   And in a separate shell:

   $ sudo dtruss -p $(pgrep -f 'sleep') > /tmp/a 2>&1

   Interestingly, sleeping for less time seems to cause issues?

 - Perhaps useful reference: iTerm2's pty wrapper:
   https://github.com/gnachman/iTerm2/blob/master/sources/PTYTask.m

 - functions and manpages that may be of interest:
    - ioctl's relevant to terminal management: man 4 tty
    - man 4 termios, and tcsetattr (function for setting terminal attributes) for setting the attributes discussed

 - random other note: the `splice` function on linux for moving data w/o going via the kernel

 - This program seems useful for testing terminal emulator behavior:
   http://invisible-island.net/vttest/vttest.html

 - Useful references:
   http://stackoverflow.com/questions/6691631/how-to-differentiate-between-escape-and-up-down-left-right-with-termios
   https://www.ecma-international.org/publications/files/ECMA-ST/Ecma-048.pdf
   https://en.wikipedia.org/wiki/ANSI_escape_code#Colors
   http://www.leonerd.org.uk/code/libtermkey/
   http://www.leonerd.org.uk/hacks/fixterms/
   http://www.leonerd.org.uk/hacks/hints/xterm-8bit.html
   http://stackoverflow.com/questions/30960767/vim-remove-lag-for-esc-and-ctrl
   http://man7.org/linux/man-pages/man4/console_codes.4.html
   https://github.com/mintty/mintty/wiki/CtrlSeqs
   http://vi.stackexchange.com/questions/3225/disable-esc-but-keep-c

 - The "table" (see 'static Key key') here:

     http://git.suckless.org/st/tree/config.def.h

   in conjuction with with 'kmap' function here:

     http://git.suckless.org/st/tree/st.c

   is useful for understanding what key presses generate what control sequences
   in which modes (app key, app cursor, crlf). If the mode column is 0, it's
   setting is irrelevant to which key get's generated. If it's +1, that means that
   sequence is used for that key press when the mode is on, or if -1, that
   sequence is used for that key press when the mode is off.

 - For converting between hex and binary, this python is useful:
   bin(0x1b)
   hex(0b00001000)

 - "Application cursor mode", and others. In the xterm docs, the "cursor" keys
   refers to the arrow keys.

   Here's what the xterm docs say about how arrow keys get transmitted to apps,
   which I found a bit unclear:

   > The cursor keys transmit the following escape sequences depending on the
   > mode specified via the DECCKM escape sequence.
   >
   >              Key            Normal     Application
   >              -------------+----------+-------------
   >              Cursor Up    | CSI A    | SS3 A
   >              Cursor Down  | CSI B    | SS3 B
   >              Cursor Right | CSI C    | SS3 C
   >              Cursor Left  | CSI D    | SS3 D
   >              -------------+----------+-------------

   They never really define "CSI", although it's pretty clearly 'ESC' and '['.
   SS3 is even less explicitly defined, but it turns out it refers to the sequence
   'ESC' and 'O'.

   In particular, it's "defined" in the "C1 (8-Bit) Control Characters"
   section, which lists sequences, an english description, and then in parantheses
   give the 8-bit code (see below) by saying something like "XYZ is 0xAB" where
   "XYZ" is a canonical 3 letter abbreviation for the sequence that's usually the
   preferred way to identify it.

 - A terminal emulator both sends and receives control sequences. There are
   both 7-bit and 8-bit modes. In 7-bit mode, a sequence is sent as two bytes,
   ESC followed by a character, <C>. In 8-bit mode, it seems that the sequence
   sent is the single byte represented *by* the "^<C>" character, with the high
   bit set. E.g., in 7-bit mode, 'Next Line' is ESC and 'E', in 8-bit mode it's
   0x85 (which is '^E' with the high bit set).

   According to the xterm spec, in application cursor mode, down arrow is sent
   as 'SS3' and 'B'. In 7-bit mode the control sequence for SS3 is 'ESC' and 'O'.
   In 8-bit mode it's 0x8f.

   I wondered if setting 8-bit mode (S8C1T), and then sending an arrow key to the
   application would result in an emulator sending one of these 8-bit codes. It
   seems neither terminal.app, nor iTerm2 does this, based on sending an arrow
   key to these commands:

     $ ./main.native test -to-send "$(echo -ne '\x1b G')"

     $ ./main.native test -to-send "$(echo -ne '\x1b[63;2"p')"

 - Curiously, the VT100 manuals seem to refer to the 'CSI' sequence as a single
   byte, '9/11', in their notation, meaning the nibble 9 followed by the nibble
   11, which is 'ESC' with the high bit set, which makes some sense b/c 'ESC'
   is the character encoded by '^['.

 - TODO: Test a lot of the behavior described here (e.g. around backspacing on tabs)
   https://utcc.utoronto.ca/~cks/space/blog/unix/HowUnixBackspaces
