 - Tab is weird:
   * If we send `echo "\t"\n` in one go, then \a shows up on the line and in
     the output.
   * If we send `echo "\t` and `"\n` separately, then \a shows up on the line
     but not in the output.
   * On the line editor, a \t is turned into spaces and the number of spaces
     changes if you insert characters in front. However, if you, e.g. echo the
     \t, a \t is emitted.
   * Todo: check how this corresponds to pasting these sequences "atomically"
     into a terminal
   * Todo: the above behavior is about sending chars into bash. Is bash doing
     this transformation or is the kernel doing this somewhere? Pumping the
     same chars into `cat` may help answer this.

 - Emulator references:
   * Spec of xterm control sequences:
       http://invisible-island.net/xterm/ctlseqs/ctlseqs.html (latest)
       http://www.xfree86.org/4.5.0/ctlseqs.html
   * http://bjh21.me.uk/all-escapes/all-escapes.txt
   * http://vt100.net/docs/vt100-ug/chapter3.html
   * Relevant standards: ANSI X3.64, ECMA-48
   * `man terminfo` and `infocmp`

 - An interesting example command to run:
   $ (exe=bash; term=xterm; ./main.native tty -html /tmp/x.html -dim 50x30 -cwd "/tm -env TERM=$term -env HOME=/Users/datkin -exe $(which $exe) -- $exe) 2>&1

 - To investigate issues on OS X, I've been tracing via `dtruss`. Let's say we
   want to start by trace on a "normal" nano process. First, weirdly, dtruss
   doesn't work on certain executable locations? So first:

   $ cat $(which nano) > /tmp

   Note, `cp` seems to copy some attributes that prevent dtruss from tracing,
   so you really do need to cat (or do some non-vanilla invocation of `cp`).
   Then, we can't just run:

   $ sudo dtruss /tmp/nano 2>/tmp/x

   Because even redirecting stderr is enough to interfere with the execution.

   So we need to attach from a separate shell. But we also need to capture all
   the output. Sigh.

   So this hack seems to work: in one shell run:

   $ bash -c 'sleep 10; exec /tmp/nano'

   And in a separate shell:

   $ sudo dtruss -p $(pgrep -f 'sleep') > /tmp/a 2>&1

   Interestingly, sleeping for less time seems to cause issues?

 - Perhaps useful reference: iTerm2's pty wrapper:
   https://github.com/gnachman/iTerm2/blob/master/sources/PTYTask.m

 - functions and manpages that may be of interest:
    - ioctl's relevant to terminal management: man 4 tty
    - man 4 termios, and tcsetattr (function for setting terminal attributes) for setting the attributes discussed

 - random other note: the `splice` function on linux for moving data w/o going via the kernel

 - This program seems useful for testing terminal emulator behavior:
   http://invisible-island.net/vttest/vttest.html

 - Useful references:
   http://stackoverflow.com/questions/6691631/how-to-differentiate-between-escape-and-up-down-left-right-with-termios
   https://www.ecma-international.org/publications/files/ECMA-ST/Ecma-048.pdf
   https://en.wikipedia.org/wiki/ANSI_escape_code#Colors
   http://www.leonerd.org.uk/code/libtermkey/
   http://www.leonerd.org.uk/hacks/fixterms/
   http://www.leonerd.org.uk/hacks/hints/xterm-8bit.html
   http://stackoverflow.com/questions/30960767/vim-remove-lag-for-esc-and-ctrl
   http://man7.org/linux/man-pages/man4/console_codes.4.html
   https://github.com/mintty/mintty/wiki/CtrlSeqs
   http://vi.stackexchange.com/questions/3225/disable-esc-but-keep-c
